<launch>

	<param name="robot_description" textfile="$(find orange_on_wheels)/orange_on_wheels.urdf" />
	<param name="use_gui" value="false"/>
	<arg name="map_file" default="$(find orange_on_wheels)/maps/mymap.yaml"/>


	<node name="master_sync_opcplus" pkg="master_sync_fkie" type="master_sync" respawn="true">
	</node>

	<node name="master_discovery_opcplus" pkg="master_discovery_fkie" type="zeroconf" respawn="true">
	</node>

<!--
	<node name="master_discovery_opcplus" pkg="master_discovery_fkie" type="master_discovery" respawn="true">
	</node>
-->


	<include file="topcam_server.launch">
	</include>


	<include file="phase_corr.launch">
	</include>

	<node name="stuck_detect" pkg="stuck_detector" type="stuck_detect.py" output="screen" respawn="true"/>

<!--
	<node name="joined_images" pkg="image2video" type="img2join.py" output="screen" respawn="true">
		<remap from="image_raw/compressed" to="/opcplus/image_raw/compressed" />
	</node>
-->

	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" respawn="true">
		<param name="use_tf_static" value="true"/>
		<param name="ignore_timestamp" value="true"/>
	</node>

	<node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher" respawn="true"/>


<!--
	<node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 1 map odom 50" respawn="true"/>

	<node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 1 base_link odom 100" respawn="true" />

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" />


	<node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 1 base_footprint imu 100 " />
-->

	<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf" respawn="true">
		<remap from="imu_data" to="imu/data" />
		<remap from="odom" to="fchassis/odom" />
		<param name="output_frame" value="odom_combined"/>
		<param name="freq" value="10.0"/>
		<param name="sensor_timeout" value="1.0"/>
		<param name="odom_used" value="true"/>
		<param name="imu_used" value="true"/>
		<param name="vo_used" value="false"/>
		<param name="debug" value="true"/>
		<param name="self_diagnose" value="false"/>
	</node>

<!--
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" respawn="true"/>
-->

<!--
	<include file="dn_detect.launch">
	</include>
-->

	<include file="hector_ugv.launch">
	</include>


  <node pkg="nodelet" type="nodelet" name="imu_manager" args="manager" output="screen"  respawn="true"/>

  #### Complementary filter

  <node pkg="imu_complementary_filter" type="complementary_filter_node" name="complementary_filter_gain_node" output="screen" respawn="true">
<remap from="imu/data_raw" to="fchassis/imu"/>
<remap from="imu/mag" to="fchassis/mf"/>
    <param name="do_bias_estimation" value="true"/>
    <param name="do_adaptive_gain" value="true"/>
    <param name="use_mag" value="true"/>
    <param name="gain_acc" value="0.1"/>
    <param name="gain_mag" value="0.1"/>
  </node>

<!--
	<node pkg="image_view" type="image_saver" name="image_saver" output="screen">
		<remap from="image" to="image_raw" />
		<param name="filename_format" value="/home/n800s/public_html/protopupis/last_tmp.png" />
		<param name="save_all_image" value="false" />
	</node>
	<node pkg="image_view" type="image_saver" name="image_saver_raspi" output="screen">
		<remap from="image" to="/ow_camera/image_raw" />
		<param name="filename_format" value="/home/n800s/public_html/protopupis/last_rasp_tmp.png" />
		<param name="save_all_image" value="false" />
	</node>
-->

</launch>


